// server-mongodb.js
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

const app = express();
app.use(cors());
app.use(express.json());

// Conexión a MongoDB
mongoose.connect('mongodb://localhost:27017/tienda_bienes_online', {
    useNewUrlParser: true,
    useUnifiedTopology: true
});

const db = mongoose.connection;
db.on('error', console.error.bind(console, 'Error de conexión:'));
db.once('open', () => {
    console.log('Conectado a MongoDB');
});

// Esquemas de MongoDB
const userSchema = new mongoose.Schema({
    name: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    type: { type: String, enum: ['buyer', 'seller'], required: true },
    phone: String,
    address: String,
    bio: String,
    rating: { type: Number, default: 0 },
    createdAt: { type: Date, default: Date.now }
});

const productSchema = new mongoose.Schema({
    name: { type: String, required: true },
    description: { type: String, required: true },
    price: { type: Number, required: true },
    category: { 
        type: String, 
        enum: ['ropa', 'hogar', 'electronica', 'propiedades', 'otros'],
        required: true 
    },
    imageUrl: String,
    sellerId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    sellerName: String,
    active: { type: Boolean, default: true },
    createdAt: { type: Date, default: Date.now }
});

const locationSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    latitude: { type: Number, required: true },
    longitude: { type: Number, required: true }
});

const User = mongoose.model('User', userSchema);
const Product = mongoose.model('Product', productSchema);
const Location = mongoose.model('Location', locationSchema);

// Middleware de autenticación
const authenticateToken = async (req, res, next) => {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (!token) {
        return res.status(401).json({ error: 'Token requerido' });
    }

    try {
        const decoded = jwt.verify(token, 'tu_secreto_jwt');
        req.user = decoded;
        next();
    } catch (error) {
        return res.status(403).json({ error: 'Token inválido' });
    }
};

// Endpoints de Usuarios
app.post('/api/register', async (req, res) => {
    try {
        const { name, email, password, type } = req.body;
        
        // Verificar si el usuario existe
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ error: 'El usuario ya existe' });
        }

        // Hash de la contraseña
        const hashedPassword = await bcrypt.hash(password, 10);

        // Crear usuario
        const user = new User({
            name,
            email,
            password: hashedPassword,
            type
        });

        await user.save();

        const token = jwt.sign(
            { userId: user._id, email: user.email, type: user.type },
            'tu_secreto_jwt',
            { expiresIn: '24h' }
        );

        res.json({ 
            message: 'Usuario registrado exitosamente',
            token,
            user: { id: user._id, name, email, type }
        });
    } catch (error) {
        res.status(500).json({ error: 'Error del servidor' });
    }
});

app.post('/api/login', async (req, res) => {
    try {
        const { email, password } = req.body;

        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ error: 'Credenciales inválidas' });
        }

        const validPassword = await bcrypt.compare(password, user.password);
        if (!validPassword) {
            return res.status(400).json({ error: 'Credenciales inválidas' });
        }

        const token = jwt.sign(
            { userId: user._id, email: user.email, type: user.type },
            'tu_secreto_jwt',
            { expiresIn: '24h' }
        );

        res.json({
            message: 'Login exitoso',
            token,
            user: {
                id: user._id,
                name: user.name,
                email: user.email,
                type: user.type
            }
        });
    } catch (error) {
        res.status(500).json({ error: 'Error del servidor' });
    }
});

// Endpoints de Productos
app.get('/api/products', async (req, res) => {
    try {
        const products = await Product.find({ active: true })
            .populate('sellerId', 'name email')
            .exec();
        res.json(products);
    } catch (error) {
        res.status(500).json({ error: 'Error obteniendo productos' });
    }
});

app.post('/api/products', authenticateToken, async (req, res) => {
    try {
        const { name, description, price, category, imageUrl } = req.body;
        
        const user = await User.findById(req.user.userId);
        
        const product = new Product({
            name,
            description,
            price,
            category,
            imageUrl,
            sellerId: req.user.userId,
            sellerName: user.name
        });

        await product.save();

        res.json({ 
            message: 'Producto agregado exitosamente',
            productId: product._id
        });
    } catch (error) {
        res.status(500).json({ error: 'Error agregando producto' });
    }
});

app.get('/api/user/products', authenticateToken, async (req, res) => {
    try {
        const products = await Product.find({ sellerId: req.user.userId });
        res.json(products);
    } catch (error) {
        res.status(500).json({ error: 'Error obteniendo productos' });
    }
});

// Endpoint de perfil de usuario
app.put('/api/profile', authenticateToken, async (req, res) => {
    try {
        const { name, email, phone, address, bio } = req.body;
        
        await User.findByIdAndUpdate(req.user.userId, {
            name,
            email,
            phone,
            address,
            bio
        });

        res.json({ message: 'Perfil actualizado exitosamente' });
    } catch (error) {
        res.status(500).json({ error: 'Error actualizando perfil' });
    }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Servidor MongoDB ejecutándose en puerto ${PORT}`);
});